service: ublog-backend

frameworkVersion: '2'

plugins:
  - serverless-stage-manager
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'local'}
  iam:
    role:
      statements:
        - Effect: Allow
          Resource:
            Fn::Join:
              - ""
              - - Fn::GetAtt:
                    - ublogTable
                    - Arn
                - "/*"
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
  environment:
    DDB_NAME: ${self:custom.ddbName.${self:provider.stage}}
    DDB_REGION: ${self:custom.ddbRegion.${self:provider.stage}}
    DDB_ENDPOINT: ${self:custom.ddbEndpoint.${self:provider.stage}}
    DDB_ACCESS_KEY: ${self:custom.ddbAccessKey.${self:provider.stage}}
    DDB_SECRET_KEY: ${self:custom.ddbSecretKey.${self:provider.stage}}

resources: # CloudFormation template syntax
  Resources:
    ublogTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.ddbName.${self:provider.stage}}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: gsi1pk
            AttributeType: S
          - AttributeName: gsi1sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: gsi1
            KeySchema:
              - AttributeName: gsi1pk
                KeyType: HASH
              - AttributeName: gsi1sk
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

custom:
  stages:
    - local
    - dev
    - prod

  ddbName:
    local: ublog
    dev: ublog-dev
  ddbRegion:
    local: localhost
    dev: us-east-2
  ddbEndpoint:
    local: http://localhost:8000
    dev: https://dynamodb.us-east-2.amazonaws.com
  ddbAccessKey:
    local: DEFAULT_ACCESS_KEY
    dev: ''
  ddbSecretKey:
    local: DEFAULT_SECRET
    dev: ''

  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - local
      - dev
      - prod
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    # Uncomment only if you already have a DynamoDB running locally

functions:
  postsVersions:
    handler: src/handlers/posts/index.versions
    events:
      - httpApi: 'GET /posts/{slug}/versions'
  postVersion:
    handler: src/handlers/posts/index.get
    events:
      - httpApi: 'GET /posts/{slug}/versions/{version}'
  postsIndex:
    handler: src/handlers/posts/index.index
    events:
      - httpApi: 'GET /posts'
  postsStore:
    handler: src/handlers/posts/index.store
    events:
      - httpApi: 'POST /posts'
  postsGet:
    handler: src/handlers/posts/index.get
    events:
      - httpApi: 'GET /posts/{slug}'
  postsDelete:
    handler: src/handlers/posts/index.delete
    events:
      - httpApi: 'DELETE /posts/{slug}'
  postsRollback:
    handler: src/handlers/posts/index.rollback
    events:
      - httpApi: 'PUT /posts/{slug}/versions/{version}'
  tagsStore:
    handler: src/handlers/tags/index.store
    events:
      - httpApi: 'POST /tags'
  tagsIndex:
    handler: src/handlers/tags/index.index
    events:
      - httpApi: 'GET /tags'
  tagPostStore:
    handler: src/handlers/tags/index.tag
    events:
      - httpApi: 'POST /posts/{post_slug}/tag/{tag_slug}'
  tagPostDelete:
    handler: src/handlers/tags/index.untag
    events:
      - httpApi: 'DELETE /posts/{post_slug}/tag/{tag_slug}'
  listPostTags:
    handler: src/handlers/tags/index.list
    events:
      - httpApi: 'GET /posts/{slug}/tags'

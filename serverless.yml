service: ublog-backend

frameworkVersion: '2'

plugins:
  - serverless-stage-manager
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'local'}
  httpApi:
    cors: true
    authorizers:
      cognitoAuthorizer:
        name: cognitoAuthorizer
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.us-east-1.amazonaws.com/us-east-1_Z5Cw4Zq7c
        audience: [v2ki29kbh7q9po090ti70nuo7, v2ki29kbh7q9po090ti70nuo7]
  iam:
    deploymentRole: arn:aws:iam::186669703643:role/cloudformation-creation-role
    role:
      statements:
        - Effect: Allow
          Resource:
            Fn::Join:
              - ""
              - - Fn::GetAtt:
                    - ublogTable
                    - Arn
                - "*"
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
  environment:
    COGNITO_POOL_ID: us-east-1_Z5Cw4Zq7c
    COGNITO_CLIENT_ID: v2ki29kbh7q9po090ti70nuo7
    DDB_NAME: ${self:custom.ddbName.${self:provider.stage}}
    DDB_REGION: ${self:custom.ddbRegion.${self:provider.stage}}
    DDB_ENDPOINT: ${self:custom.ddbEndpoint.${self:provider.stage}}
    DDB_ACCESS_KEY: ${self:custom.ddbAccessKey.${self:provider.stage}}
    DDB_SECRET_KEY: ${self:custom.ddbSecretKey.${self:provider.stage}}

resources: # CloudFormation template syntax
  Resources:
    ublogTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.ddbName.${self:provider.stage}}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: gsi1pk
            AttributeType: S
          - AttributeName: gsi1sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: gsi1
            KeySchema:
              - AttributeName: gsi1pk
                KeyType: HASH
              - AttributeName: gsi1sk
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    ApiMapping:
      Type: AWS::ApiGatewayV2::ApiMapping
      Properties:
        DomainName: ${self:provider.stage}--blog.${aws:region}.aws.hugo.dev.br
        ApiId: !Ref HttpApi
        Stage: !Ref HttpApiStage

custom:
  stages:
    - local
    - dev
    - prod

  ddbName:
    local: ublog-local
    dev: ublog-dev
    prod: ublog-prod
  ddbRegion:
    local: localhost
    dev: us-east-2
    prod: sa-east-1
  ddbEndpoint:
    local: http://localhost:8000
    dev: https://dynamodb.us-east-2.amazonaws.com
    prod: https://dynamodb.sa-east-1.amazonaws.com
  ddbAccessKey:
    local: DEFAULT_ACCESS_KEY
    dev: ''
    prod: ''
  ddbSecretKey:
    local: DEFAULT_SECRET
    dev: ''
    prod: ''

  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - local
      - dev
      - prod
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    # Uncomment only if you already have a DynamoDB running locally

functions:
  postsVersions:
    handler: src/handlers/index.postVersions
    events:
      - httpApi:
          method: GET
          path: /posts/{slug}/versions
          authorizer:
            name: cognitoAuthorizer
  postVersion:
    handler: src/handlers/index.postGet
    events:
      - httpApi: 'GET /posts/{slug}/versions/{version}'
  postsIndex:
    handler: src/handlers/index.postIndex
    events:
      - httpApi: 'GET /posts'
  postsStore:
    handler: src/handlers/index.postStore
    events:
      - httpApi:
          path: /posts
          method: POST
          authorizer:
            name: cognitoAuthorizer
  postsGet:
    handler: src/handlers/index.postGet
    events:
      - httpApi: 'GET /posts/{slug}'
  postsDelete:
    handler: src/handlers/index.postDelete
    events:
      - httpApi:
          method: DELETE
          path: /posts/{slug}
          authorizer:
            name: cognitoAuthorizer
  tagsStore:
    handler: src/handlers/index.tagStore
    events:
      - httpApi:
          method: POST
          path: /tags
          authorizer:
            name: cognitoAuthorizer
  tagsIndex:
    handler: src/handlers/index.tagIndex
    events:
      - httpApi: 'GET /tags'
  tagPostStore:
    handler: src/handlers/index.tagTag
    events:
      - httpApi:
          method: POST
          path: /posts/{post_slug}/tags/{tag_slug}
          authorizer:
            name: cognitoAuthorizer
  tagPostDelete:
    handler: src/handlers/index.tagUntag
    events:
      - httpApi:
          method: DELETE
          path: /posts/{post_slug}/tags/{tag_slug}
          authorizer:
            name: cognitoAuthorizer
  listPostTags:
    handler: src/handlers/index.tagList
    events:
      - httpApi: 'GET /posts/{slug}/tags'

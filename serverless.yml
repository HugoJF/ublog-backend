service: ublog-backend

frameworkVersion: '2'

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221

resources: # CloudFormation template syntax
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: posts
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
          - AttributeName: GSIKOPK
            AttributeType: S
          - AttributeName: GSIKOSK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

          - IndexName: GSIKO
            KeySchema:
              - AttributeName: GSIKOPK
                KeyType: HASH
              - AttributeName: GSIKOSK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

custom:
  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    # Uncomment only if you already have a DynamoDB running locally

functions:
  postsVersions:
    handler: src/handlers/posts/index.versions
    events:
      - httpApi: 'GET /posts/{slug}/versions'
  postVersion:
    handler: src/handlers/posts/index.get
    events:
      - httpApi: 'GET /posts/{slug}/versions/{version}'
  postsIndex:
    handler: src/handlers/posts/index.index
    events:
      - httpApi: 'GET /posts'
  postsStore:
    handler: src/handlers/posts/index.store
    events:
      - httpApi: 'POST /posts'
  postsGet:
    handler: src/handlers/posts/index.get
    events:
      - httpApi: 'GET /posts/{slug}'
  postsDelete:
    handler: src/handlers/posts/index.delete
    events:
      - httpApi: 'DELETE /posts/{slug}'
  postsRollback:
    handler: src/handlers/posts/index.rollback
    events:
      - httpApi: 'PUT /posts/{slug}/versions/{version}'
  tagsStore:
    handler: src/handlers/tags/index.store
    events:
      - httpApi: 'POST /tags'
  tagsIndex:
    handler: src/handlers/tags/index.index
    events:
      - httpApi: 'GET /tags'
